apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8sdenyhostnetprivileged
  annotations:
    description: "Denies hostNetwork and privileged containers in Pods and Deployments"
spec:
  crd:
    spec:
      names:
        kind: K8sDenyHostNetPrivileged
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sdenyhostnetprivileged

        # Get the spec based on resource type
        get_spec(obj) = spec {
          obj.kind == "Pod"
          spec := obj.spec
        }

        get_spec(obj) = spec {
          obj.kind != "Pod"
          # For Deployment, StatefulSet, DaemonSet, etc.
          spec := obj.spec.template.spec
        }

        # Violation: hostNetwork is enabled (Logic to deny hostNetwork)
        violation[{"msg": msg}] {
          obj := input.review.object
          spec := get_spec(obj)
          spec.hostNetwork == true
          msg := sprintf("hostNetwork is not allowed for %v/%v", [obj.kind, obj.metadata.name])
        }

        # Violation: privileged containers (Logic to deny priviledged containers)
        violation[{"msg": msg}] {
          obj := input.review.object
          spec := get_spec(obj)
          container := spec.containers[_]
          container.securityContext.privileged == true
          msg := sprintf("privileged container '%v' is not allowed in %v/%v", [container.name, obj.kind, obj.metadata.name])
        }

        # Violation: privileged init containers
        violation[{"msg": msg}] {
          obj := input.review.object
          spec := get_spec(obj)
          container := spec.initContainers[_]
          container.securityContext.privileged == true
          msg := sprintf("privileged init container '%v' is not allowed in %v/%v", [container.name, obj.kind, obj.metadata.name])
        }
# check containers and initContainers for privileged:true in securityContext