name: Gatekeeper CI Policy Validation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  gatekeeper-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OPA CLI
        run: |
          set -e
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/
          opa version

      - name: Validate directory structure
        run: |
          if [ ! -d "k8s-policies/gatekeeper" ]; then
            echo "ERROR: k8s-policies/gatekeeper directory not found"
            echo "Current directory structure:"
            ls -R
            exit 1
          fi

      - name: Extract and prepare Rego policy
        run: |
          set -e
          echo "Extracting Rego policy from ConstraintTemplate..."
          
          # Find the template file (supports subdirectories)
          TEMPLATE_FILE=$(find k8s-policies/gatekeeper -name "*template*.yaml" -o -name "*template*.yml" | head -n 1)
          
          if [ -z "$TEMPLATE_FILE" ]; then
            echo "ERROR: No template file found"
            exit 1
          fi
          
          echo "Found template: $TEMPLATE_FILE"
          
          # Extract the rego code from the template (between 'rego: |' and the end)
          sed -n '/rego: |/,$ p' "$TEMPLATE_FILE" | sed '1d' > policy.rego
          
          echo "✓ Rego policy extracted"
          echo ""
          echo "Policy content:"
          cat policy.rego

      - name: Test Compliant Resources
        run: |
          set -e
          echo ""
          echo "Testing COMPLIANT manifests..."
          echo "================================"
          echo ""
          
          echo "Testing: good-hostnet-privileged.yaml"
          
          # Create input JSON for OPA
          cat > input.json << 'EOF'
          {
            "review": {
              "object": $(cat k8s/compliant/good-hostnet-privileged.yaml | yq eval -o=json '.')
            }
          }
          EOF
          
          # Test with OPA - should return empty violations array
          RESULT=$(opa eval -d policy.rego -i input.json 'data.k8sdenyhostnetprivileged.violation' --format pretty)
          
          if echo "$RESULT" | grep -q "\[\]"; then
            echo "✓ Good pod passed validation (no violations)"
          else
            echo "✗ Good pod failed validation (found violations):"
            echo "$RESULT"
            exit 1
          fi
          
          echo ""
          echo "All compliant resources passed policy validation"

      - name: Test Non-Compliant Resources (Expected to Fail)
        run: |
          set -e
          echo ""
          echo "Testing NON-COMPLIANT resources..."
          echo "==================================="
          echo "These SHOULD fail - that proves policies work!"
          echo "==================================="
          echo ""
          
          # Test bad-hostnet.yaml
          echo "Testing: bad-hostnet.yaml (hostNetwork violation)"
          
          cat > input.json << 'EOF'
          {
            "review": {
              "object": $(cat k8s/bad-hostnet.yaml | yq eval -o=json '.')
            }
          }
          EOF
          
          RESULT=$(opa eval -d policy.rego -i input.json 'data.k8sdenyhostnetprivileged.violation' --format pretty)
          
          if echo "$RESULT" | grep -q "\[\]"; then
            echo "✗ WARNING: Non-compliant hostNetwork resource was NOT blocked!"
            exit 1
          else
            echo "✓ Non-compliant hostNetwork resource correctly blocked"
            echo "   Violation: $RESULT"
          fi
          
          echo ""
          
          # Test bad-privileged.yaml
          echo "Testing: bad-privileged.yaml (privileged container violation)"
          
          cat > input.json << 'EOF'
          {
            "review": {
              "object": $(cat k8s/bad-privileged.yaml | yq eval -o=json '.')
            }
          }
          EOF
          
          RESULT=$(opa eval -d policy.rego -i input.json 'data.k8sdenyhostnetprivileged.violation' --format pretty)
          
          if echo "$RESULT" | grep -q "\[\]"; then
            echo "✗ WARNING: Non-compliant privileged resource was NOT blocked!"
            exit 1
          else
            echo "✓ Non-compliant privileged resource correctly blocked"
            echo "   Violation: $RESULT"
          fi
          
          echo ""
          echo "✅ Policy enforcement verified successfully!"

      - name: Verify constraints and templates
        run: |
          echo "Checking for constraint templates and constraints..."
          echo ""
          echo "Templates found:"
          find k8s-policies/gatekeeper -name "*template*.yaml" -o -name "*template*.yml"
          echo ""
          echo "Constraints found:"
          find k8s-policies/gatekeeper -name "*constraint*.yaml" -o -name "*constraint*.yml" | grep -v template
          
          echo ""
          echo "Summary:"
          echo "- ConstraintTemplates: $(find k8s-policies/gatekeeper -name "*template*.yaml" -o -name "*template*.yml" | wc -l)"
          echo "- Constraints: $(find k8s-policies/gatekeeper -name "*constraint*.yaml" -o -name "*constraint*.yml" | grep -v template | wc -l)"