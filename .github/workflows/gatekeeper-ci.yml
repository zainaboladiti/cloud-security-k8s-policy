name: Gatekeeper CI Policy Validation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  gatekeeper-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Gator CLI
        run: |
          set -e
          
          # Get the latest release info
          latest_url=$(curl -s https://api.github.com/repos/open-policy-agent/gatekeeper/releases/latest \
            | jq -r '.assets[] | select(.name | contains("gator") and contains("linux") and contains("amd64") and endswith(".tar.gz")) | .browser_download_url')
          
          echo "Downloading Gator from: $latest_url"
          
          if [ -z "$latest_url" ]; then
            echo "ERROR: Could not find Gator download URL"
            exit 1
          fi
          
          # Download and extract
          curl -L -o gator.tar.gz "$latest_url"
          tar -xzf gator.tar.gz
          
          # Move to bin and make executable
          sudo mv gator /usr/local/bin/
          sudo chmod +x /usr/local/bin/gator
          
          # Verify installation
          gator version

      - name: Validate directory structure
        run: |
          if [ ! -d "k8s-policies/gatekeeper" ]; then
            echo "ERROR: k8s-policies/gatekeeper directory not found"
            echo "Current directory structure:"
            ls -R
            exit 1
          fi

      - name: Test Compliant Resources
        run: |
          set -e
          echo "Testing COMPLIANT manifests..."
          echo ""
          
          # Test the good pod
          echo "Testing: good-hostnet-privileged.yaml"
          if gator test \
            --filename=k8s-policies/gatekeeper \
            --filename=k8s/compliant/good-hostnet-privileged.yaml; then
            echo "Good pod passed validation (as expected)"
          else
            echo "Good pod failed validation (should not happen!)"
            exit 1
          fi
          
          echo ""
          echo "All compliant resources passed policy validation"

      - name: Test Non-Compliant Resources (Expected to Fail)
        run: |
          set -e
          echo ""
          echo "Testing NON-COMPLIANT resources..."
          echo "-------------------------------------------"
          echo "These SHOULD fail - that proves policies work!"
          echo "-------------------------------------------"
          echo ""
          
          # Test bad-hostnet.yaml
          echo "Testing: bad-hostnet.yaml (hostNetwork violation)"
          if gator test \
            --filename=k8s-policies/gatekeeper \
            --filename=k8s/bad-hostnet.yaml 2>&1 | grep -i "violation\|denied\|error"; then
            echo "Non-compliant hostNetwork resource correctly blocked by policy"
          else
            echo "WARNING: Non-compliant hostNetwork resource was NOT blocked!"
            echo "Policies may not be working correctly."
            exit 1
          fi
          
          echo ""
          
          # Test bad-privileged.yaml
          echo "Testing: bad-privileged.yaml (privileged container violation)"
          if gator test \
            --filename=k8s-policies/gatekeeper \
            --filename=k8s/bad-privileged.yaml 2>&1 | grep -i "violation\|denied\|error"; then
            echo "Non-compliant privileged resource correctly blocked by policy"
          else
            echo "WARNING: Non-compliant privileged resource was NOT blocked!"
            echo "Policies may not be working correctly."
            exit 1
          fi
          
          echo ""
          echo "Policy enforcement verified successfully!"

      - name: Verify constraints and templates
        run: |
          echo "Checking for constraint templates..."
          find k8s-policies/gatekeeper -name "*template*.yaml" -o -name "*constraint*.yaml"
          
          echo ""
          echo "Summary:"
          echo "- ConstraintTemplates: $(find k8s-policies/gatekeeper -name "*template*.yaml" | wc -l)"
          echo "- Constraints: $(find k8s-policies/gatekeeper -name "*constraint*.yaml" | wc -l)"